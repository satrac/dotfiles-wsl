# Windows 10 ConPTY backend (Windows only)
#
# This will enable better color support and may resolve other issues,
# however this API and its implementation is still young and so is
# disabled by default, as stability may not be as good as the winpty
# backend.
#
# Alacritty will fall back to the WinPTY automatically if the ConPTY
# backend cannot be initialized.
enable_experimental_conpty_backend: true

import:
# Windows
  - "~\\AppData\\Roaming\\alacritty\\schemes.yml"
# Linux
#  - ~/.config/alacritty/schemes.yml

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
#background_opacity: 0.95
background_opacity: 1.0


window:
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  glyph_offset:
   x: 0
   y: 0


  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: full
  startup_mode: Windowed

env:
  TERM: xterm-256color


shell:
  program: "C:\\Windows\\System32\\wsl.exe"
  args:
    - "~"
    - -d
    - fedoraremix

scrolling:
  history: 100000
  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3
  # Scroll to the bottom when new text is written to the terminal.
  auto_scroll: false

font:
  normal:
    family: JetBrains Mono
    style: Regular

  size: 14
  #use_thin_strokes: false
  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  use_thin_strokes: true

# Specifying a `duration` of `0` will disable the visual bell.
visual_bell:
  animation: EaseOutExpo
  duration: 0

cursor:
  style: Block
  unfocused_hollow: true
# Live config reload (changes require restart)
live_config_reload: true

tabspaces: 4

draw_bold_text_with_bright_colors: true


mouse_bindings:
  - { mouse: Right, action: PasteSelection }
#  - { mouse: Middle, mode: ~Vi, action: ExpandSelection  }


#mouse:
# Enable clickable URLs
#  url:
#    launcher:
#      program: open
#  #  modifiers: Command

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  #url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
  #  launcher: xdg-open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

# Allow terminal applications to change Alacritty’s window title.
window.dynamic_title: true

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

winpty_backend: false

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false


# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  # (Windows, Linux, and BSD only)
  - { key: V,        mods: Control|Shift, action: Paste            }
  - { key: C,        mods: Control|Shift, action: Copy             }
  - { key: Insert,   mods: Shift,         action: PasteSelection   }
  - { key: Key0,     mods: Control,       action: ResetFontSize    }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  - { key: Plus,     mods: Control,       action: IncreaseFontSize }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize }
  - { key: F11,      mods: None,          action: ToggleFullscreen }
  - { key: Paste,    mods: None,          action: Paste            }
  - { key: Copy,     mods: None,          action: Copy             }
  # (Windows only)
  - { key: Return,   mods: Alt,           action: ToggleFullscreen }
  # add a keybinding to open alacritty settings with Ctrl+,
  - { key: Comma,    mods: Control,       command: { program: "C:\\Users\\john-\\AppData\\Local\\Programs\\Microsoft VS Code\\code.exe", args: ["C:\\Users\\john-\\AppData\\Roaming\\alacritty\\alacritty.yml"] } }
# set some default keybindings
#key_bindings:
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#key_bindings:
#    # (Windows, Linux, and BSD only)
  # - { key: V,         mods: Control|Shift, action: Paste                       }
  # - { key: C,         mods: Control|Shift, action: Copy                        }
  # - { key: Insert,    mods: Shift,         action: PasteSelection              }
  # - { key: Key0,      mods: Control,       action: ResetFontSize               }
  # - { key: Equals,    mods: Control,       action: IncreaseFontSize            }
  # - { key: Plus,      mods: Control,       action: IncreaseFontSize            }
  # - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  # - { key: F11,       mods: None,          action: ToggleFullscreen            }
  # - { key: Paste,     mods: None,          action: Paste                       }
  # - { key: Copy,      mods: None,          action: Copy                        }
  # - { key: L,         mods: Control,       action: ClearLogNotice              }
  # - { key: L,         mods: Control,       chars: "\x0c"                       }
  # - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  # - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  # - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  # - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt  }

  # # add a keybinding to open alacritty settings with Ctrl+,
  # - { key: Comma, mods: Control, command: { program: "C:\\Users\\john-\\AppData\\Local\\Programs\\Microsoft VS Code\\code.exe", args: ["C:\\Users\\john-\\AppData\\Roaming\\alacritty\\alacritty.yml"] } }